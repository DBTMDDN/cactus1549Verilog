//HALF_ADDER
module top_module( 
    input a, b,
    output cout, sum );
    assign sum=a^b;
    assign cout=a&b;
endmodule

//FULL_ADDER
module top_module( 
    input a, 
    b, 
    cin,
    output cout,
    sum );
    assign sum=a^b^cin;
    assign cout=(a&b)|((a^b)&cin);
endmodule

//3_BIT_BINARY_ADDER
module full_adder( 
    input a, 
    b, 
    cin,
    output cout,
    sum );
    assign sum=a^b^cin;
    assign cout=(a&b)|((a^b)&cin);
endmodule

module top_module( 
    input [2:0] a, b,
    input cin,
    output [2:0] cout,
    output [2:0] sum );
    full_adder fa0 (
        .a(a[0]),
        .b(b[0]),
        .cin(cin),
        .sum(sum[0]),
        .cout(cout[0])
    );
    full_adder fa1 (
        .a(a[1]),
        .b(b[1]),
        .cin(cout[0]),
        .sum(sum[1]),
        .cout(cout[1])
    );
    full_adder fa2 (
        .a(a[2]),
        .b(b[2]),
        .cin(cout[1]),
        .sum(sum[2]),
        .cout(cout[2])
    );
    
endmodule


//4BIT_ADDER
module full_adder( 
    input x, 
    y, 
    cin,
    output cout,
    sum );
    assign sum=x^y^cin;
    assign cout=(x&y)|((x^y)&cin);
endmodule

module top_module (
    input [3:0] x,
    input [3:0] y, 
    output [4:0] sum);
    wire c0;
    wire c1;
    wire c2;
    full_adder fa0 (
        .x(x[0]),
        .y(y[0]),
        .cout(c0),
        .sum(sum[0])
    );
    full_adder fa1 (
        .x(x[1]),
        .y(y[1]),
        .cin(c0),
        .cout(c1),
        .sum(sum[1])
    );
    full_adder fa2 (
        .x(x[2]),
        .y(y[2]),
        .cin(c1),
        .cout(c2),
        .sum(sum[2])
    );
    full_adder fa3 (
        .x(x[3]),
        .y(y[3]),
        .cin(c2),
        .sum(sum[3]),
        .cout(sum[4])
    );
endmodule